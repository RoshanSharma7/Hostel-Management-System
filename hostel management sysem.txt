#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

// Define a struct to hold student information
struct Student {
    string name;
    int id;
    string course;
};

// Function to add a new student to the file
void addStudent() {
    Student student;
    cout << "Enter student name: ";
    getline(cin, student.name);
    cout << "Enter student ID: ";
    cin >> student.id;
    cin.ignore(); // Ignore the newline character left in the input buffer
    cout << "Enter student course: ";
    getline(cin, student.course);

    ofstream outFile("students.txt", ios::app); // Open the file in append mode
    outFile << student.name << ',' << student.id << ',' << student.course << endl;
    outFile.close();

    cout << "Student added successfully!" << endl;
}

// Function to edit an existing student's information in the file
void editStudent() {
    int id;
    cout << "Enter ID of student to edit: ";
    cin >> id;
    cin.ignore(); // Ignore the newline character left in the input buffer

    ifstream inFile("students.txt");
    ofstream outFile("temp.txt"); // Open a temporary file for writing

    bool found = false;
    while (inFile.good()) {
        string line;
        getline(inFile, line);
        if (line.empty()) continue; // Skip empty lines
        int pos = line.find(',');
        int currId = stoi(line.substr(pos+1));
        if (currId == id) {
            // Found the student to edit
            Student student;
            student.name = line.substr(0, pos);
            student.id = currId;
            student.course = line.substr(pos+3);
            cout << "Enter new student name (currently " << student.name << "): ";
            getline(cin, student.name);
            cout << "Enter new student course (currently " << student.course << "): ";
            getline(cin, student.course);
            outFile << student.name << ',' << student.id << ',' << student.course << endl;
            found = true;
            cout << "Student edited successfully!" << endl;
        } else {
            // Copy the line to the temporary file
            outFile << line << endl;
        }
    }

    inFile.close();
    outFile.close();

    if (!found) {
        cout << "Student not found." << endl;
        remove("temp.txt"); // Delete the temporary file
    } else {
        remove("students.txt"); // Delete the original file
        rename("temp.txt", "students.txt"); // Rename the temporary file to the original name
    }
}

// Function to display a list of all students currently in the hostel
void viewStudents() {
    ifstream inFile("students.txt");
    vector<Student> students;
    while (inFile.good()) {
        string line;
        getline(inFile, line);
        if (line.empty()) continue; // Skip empty lines
        int pos = line.find(',');
        int id = stoi(line.substr(pos+1));
        Student student;
        student.name = line.substr(0, pos);
        student.id = id;
        student.course = line.substr(pos+3);
        students.push_back(student);
    }
    inFile.close();

    if (students.empty()) {
        cout << "No students found." << endl;
    } else {
        cout << "Name\tID\tCourse" << endl;
        for (const auto& student : students) {
            cout << student.name << '\t' << student.id << '\t' << student.course << endl;
        }
    }
}

// Function to delete an existing student from the file
void deleteStudent() {
    int id;
    cout << "Enter ID of student to delete: ";
    cin >> id;
    cin.ignore(); // Ignore the newline character left in the input buffer

    ifstream inFile("students.txt");
    ofstream outFile("temp.txt"); // Open a temporary file for writing

    bool found = false;
    while (inFile.good()) {
        string line;
        getline(inFile, line);
        if (line.empty()) continue; // Skip empty lines
        int pos = line.find(',');
        int currId = stoi(line.substr(pos+1));
        if (currId == id) {
            // Found the student to delete
            cout << "Are you sure you want to delete the following student:" << endl;
            cout << line << endl;
            cout << "(y/n): ";
            char confirm;
            cin >> confirm;
            cin.ignore(); // Ignore the newline character left in the input buffer
            if (confirm == 'y' || confirm == 'Y') {
                found = true;
                cout << "Student deleted successfully!" << endl;
            } else {
                outFile << line << endl; // Copy the line to the temporary file
            }
        } else {
            // Copy the line to the temporary file
            outFile << line << endl;
        }
    }

    inFile.close();
    outFile.close();

    if (!found) {
        cout << "Student not found." << endl;
        remove("temp.txt"); // Delete the temporary file
    } else {
        remove("students.txt"); // Delete the original file
        rename("temp.txt", "students.txt"); // Rename the temporary file to the original name
    }
}

// Main function to run the program
int main() {
    while (true) {
        // Display menu options
        cout << "Hostel Management System" << endl;
        cout << "1. Add student" << endl;
        cout << "2. Edit student" << endl;
        cout << "3. View students" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;
        cin.ignore(); // Ignore the newline character left in the input buffer

        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                editStudent();
                break;
            case 3:
                viewStudents();
                break;
            case 4:
                cout << "Exiting program..." << endl;
                return 0;
            default:
                cout << "Invalid choice. Try again." << endl;
        }

        cout << endl;
    }
}
